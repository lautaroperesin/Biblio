@page "/admin/editoriales"
@inject NavigationManager _navigationManager
@inject IGenericService<Editorial> _editorialService
@inject SweetAlertService _sweetAlert
@rendermode InteractiveServer

<EncabezadoPage Titulo="Administracion de Editoriales" Descripcion="Gestiona los editoriales de los libros en la plataforma"/>

<div class="container py-4">
	<SeccionBtnNuevoMostrarEliminados OnNuevo="Nuevo" @bind-MostrarEliminados="MostrarEliminados" OnAfterMostrarEliminados="GetEditoriales"></SeccionBtnNuevoMostrarEliminados>
    @if (isLoading)
    {
        <ActivityIndicator Mensaje="Cargando editoriales..."></ActivityIndicator>
    }
    else
    {
        @if (editoriales != null && editoriales.Count > 0)
        {
            <TablaIdNombreConFiltro ListEntity="@(editoriales.Cast<IEntityIdNombre>().ToList())" OnEliminar="Eliminar" OnModificar="Modificar" OnRestaurar="Restaurar" MostrarEliminados="MostrarEliminados"></TablaIdNombreConFiltro>
            <NuevoEditarIdNombre Titulo="Editorial" Entity="editorialSeleccionada" OnGuardar="Guardar"></NuevoEditarIdNombre>
        }
        else
        {
            @if(MostrarEliminados)
            {
                <div class="alert alert-info" role="alert">
                    No hay editoriales eliminados.
                </div>
            }
            else
            {
                <div class="alert alert-info" role="alert">
                    No hay editoriales registrados.
                </div>
			}
        }
    }
</div>

@code {
    List<Editorial>? editoriales = new List<Editorial>();
    Editorial editorialSeleccionada = new();
    public bool MostrarEliminados { get; set; } = false;

    bool isLoading;

    protected override async Task OnInitializedAsync()
    {
        await GetEditoriales();
    }

    private async Task GetEditoriales()
    {
        isLoading = true;
        if (MostrarEliminados)
        {
            editoriales = await _editorialService.GetAllDeletedsAsync();
        }
        else
        {
            editoriales = await _editorialService.GetAllAsync();
        }
        isLoading = false;
        StateHasChanged();
    }

    private void Modificar(IEntityIdNombre entity)
    {
        editorialSeleccionada = (Editorial)entity;
    }

    private void Nuevo()
    {
        editorialSeleccionada = new();
    }

    private async Task Guardar(IEntityIdNombre entity)
    {
        try
        {
            isLoading = true;
            Editorial editorialToSave = (Editorial)entity;
            if (editorialToSave.Id == 0)
            {
                // Nuevo editorial
                await _editorialService.AddAsync(editorialToSave);
                await _sweetAlert.FireAsync("Creado", "El editorial ha sido creado exitosamente.", SweetAlertIcon.Success);
            }
            else
            {
                // Actualizar editorial existente
                await _editorialService.UpdateAsync(editorialToSave);
                await _sweetAlert.FireAsync("Actualizado", "El editorial ha sido actualizado exitosamente.", SweetAlertIcon.Success);
            }
            editoriales = await _editorialService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await _sweetAlert.FireAsync("Error", "Hubo un error al guardar el editorial.", SweetAlertIcon.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task Eliminar(IEntityIdNombre entity)
    {
        SweetAlertResult respuesta = await _sweetAlert.FireAsync(new SweetAlertOptions
            {
                Title = "Eliminando editorial",
                Text = $"¿Está seguro que desea borrar al editorial {entity.Nombre}",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Si, quiero borrarlo!",
                CancelButtonText = "No, espera"
            });
        if (respuesta.IsConfirmed)
        {
            try
            {
                await _editorialService.DeleteAsync(entity.Id);
                isLoading = true;
                editoriales = await _editorialService.GetAllAsync();
                await _sweetAlert.FireAsync("Eliminado", "El editorial ha sido eliminado exitosamente.", SweetAlertIcon.Success);
            }
            catch (Exception ex)
            {
                await _sweetAlert.FireAsync("Error", "Hubo un error al eliminar el editorial.", SweetAlertIcon.Error);
            }
            finally
            {
                isLoading = false;
            }
        }
    }

    private async Task Restaurar(IEntityIdNombre entity)
    {
        SweetAlertResult respuesta = await _sweetAlert.FireAsync(new SweetAlertOptions
        {
            Title = "Restaurando editorial",
            Text = $"¿Está seguro que desea restaurar al editorial {entity.Nombre}?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            ConfirmButtonText = "Si, quiero restaurarlo!",
            CancelButtonText = "No, espera"
        });
        if (respuesta.IsConfirmed)
        {
            try
            {
                isLoading = true;
                await _editorialService.RestoreAsync(entity.Id);
                editoriales = await _editorialService.GetAllDeletedsAsync();
                await _sweetAlert.FireAsync("Restaurado", "El editorial ha sido restaurado exitosamente.", SweetAlertIcon.Success);
            }
            catch (Exception ex)
            {
                await _sweetAlert.FireAsync("Error", "Hubo un error al restaurar el editorial.", SweetAlertIcon.Error);
            }
            finally
            {
                isLoading = false;
            }
        }
    }
}
