@using Service.Enums
@inject FirebaseAuthService _firebaseAuthService
@inject NavigationManager _navigationManager
@inject IUsuarioService _usuarioService
@inject IMemoryCache _cacheMemory
@rendermode InteractiveServer

<nav class="navbar navbar-expand-lg navbar-dark bg-dark align-items-center">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Web</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav me-auto">
                <li class="nav-item">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <span class="bi bi-house-door-fill-nav-menu" style="padding-top:0em !important" aria-hidden="true"></span> Inicio
                    </NavLink>
                </li>
                @if (_isLogued)
                {
                    <li class="nav-item">
                        <NavLink class="nav-link" href="/miembros/buscar-libros">
                            <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Buscar libros
                        </NavLink>
                    </li>
                    <li class="nav-item">
                        <NavLink class="nav-link" href="/miembros/prestamos">
                            <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Prestamos libros
                        </NavLink>
                    </li>
                    <li class="nav-item">
                        <span class="nav-link">Hola, @_usuarioLogueado?.Nombre</span>
                    </li>
                }
                @if (_usuarioLogueado != null && (_usuarioLogueado.TipoRol == TipoRolEnum.Bibliotecario))
                {
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="adminDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            Admin
                        </a>
                        <ul class="dropdown-menu" aria-labelledby="adminDropdown">
                            <li><NavLink class="dropdown-item" href="/admin/autores">Autores</NavLink></li>
                            <li><NavLink class="dropdown-item" href="/admin/editoriales">Editoriales</NavLink></li>
                            <li><NavLink class="dropdown-item" href="/admin/carreras">Carreras</NavLink></li>
                            <li><NavLink class="dropdown-item" href="/admin/generos">Géneros</NavLink></li>
                            <li><hr class="dropdown-divider"/></li>
							<li><NavLink class="dropdown-item" href="/admin/libros">Libros</NavLink></li>
                        </ul>
                    </li>
                }
            </ul>
            <ul class="navbar-nav ms-auto">
                <li class="nav-item">
                    <NavLink class="nav-link" href="login">
                        <span class="bi bi-login" aria-hidden="true"></span> @textBtnLogin
                    </NavLink>
                </li>
            </ul>
        </div>
    </div>
</nav>

@code {
    FirebaseUser? _userLogued;
    bool _isLogued = false;
    Usuario? _usuarioLogueado;
    private string textBtnLogin => _isLogued ? "Cerrar sesión" : "Iniciar sesión";

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //_firebaseAuthService.OnChangeLogin += async () => await InvokeAsync(LoginChangedAsync);
            _firebaseAuthService.OnChangeLogin += LoginChanged;
            if (await _firebaseAuthService.IsUserAuthenticated())
            {
                _userLogued = _firebaseAuthService.CurrentUser;
                _isLogued = true;
                if (_usuarioLogueado == null) await CargarUsuarioAsync();
            }
            else
            {
                _isLogued = false;
                _userLogued = null;
                _navigationManager.NavigateTo("/login");

            }
        }
    }

    private async Task CargarUsuarioAsync()
    {
        try
        {
            if (!string.IsNullOrWhiteSpace(_userLogued?.Email))
            {
                _usuarioLogueado = await _usuarioService.GetByEmailAsync(_userLogued.Email);
                if (_usuarioLogueado != null)
                {
                    _cacheMemory.Set("usuarioLogueado", _usuarioLogueado);
                }
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex);
        }
    }

    private async void LoginChanged()
    {
        if (_firebaseAuthService.CurrentUser != null)
        {
            _userLogued = _firebaseAuthService.CurrentUser;
            _isLogued = true;
            if (_usuarioLogueado == null) await CargarUsuarioAsync();

        }
        else
        {
            _isLogued = false;
            _userLogued = null;
            _navigationManager.NavigateTo("/login");
        }
        StateHasChanged();
    }


}
